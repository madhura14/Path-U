/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package utility;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;
import java.sql.Statement;
import java.sql.ResultSet;
import javafx.stage.Stage;
/**
 *
 * @author admin
 */
public class DLUFrame extends javax.swing.JFrame {

    /**
     * Creates new form DLUFrame
     */
    Details dt=new Details();
    static long start;
    int min_Util;
    private String[] args;
    public DLUFrame(int min) 
    {
        
        initComponents();
        min_Util=min;
        
     long start=System.currentTimeMillis();
    this.start=start;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Cambria Math", 0, 15)); // NOI18N
        jLabel2.setText("Get Path");

        jButton1.setFont(new java.awt.Font("Cambria Math", 0, 15)); // NOI18N
        jButton1.setText("Get");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable3.setFont(new java.awt.Font("Cambria Math", 0, 17)); // NOI18N
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Path"
            }
        ));
        jTable3.setRowHeight(25);
        jScrollPane3.setViewportView(jTable3);

        jLabel3.setFont(new java.awt.Font("Cambria Math", 0, 15)); // NOI18N

        jTable4.setFont(new java.awt.Font("Cambria Math", 0, 17)); // NOI18N
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Value"
            }
        ));
        jTable4.setRowHeight(25);
        jScrollPane4.setViewportView(jTable4);

        jTable5.setFont(new java.awt.Font("Cambria Math", 0, 17)); // NOI18N
        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Reorganized Path -DLU"
            }
        ));
        jTable5.setRowHeight(25);
        jScrollPane5.setViewportView(jTable5);

        jTable6.setFont(new java.awt.Font("Cambria Math", 0, 17)); // NOI18N
        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Reorganized Path - DNU"
            }
        ));
        jTable6.setRowHeight(25);
        jScrollPane6.setViewportView(jTable6);

        jLabel4.setFont(new java.awt.Font("Baskerville Old Face", 0, 30)); // NOI18N
        jLabel4.setText("Mining High Utility Itemsets");

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton2.setText("Get Graph");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable7.setFont(new java.awt.Font("Cambria Math", 0, 17)); // NOI18N
        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Path"
            }
        ));
        jTable7.setRowHeight(25);
        jScrollPane1.setViewportView(jTable7);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(35, 35, 35)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addGap(40, 40, 40))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(211, 211, 211)
                .addComponent(jLabel4)
                .addContainerGap(257, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 812, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 628, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        try
        {
            ArrayList ch1=dt.child1;
            String g1=ch1.get(0).toString();
            String cp="";

            if(dt.rt1.contains(g1))
            {
                int k=dt.rt1.indexOf(g1);
                cp=dt.rt2.get(k).toString();
                jLabel3.setText(g1+" : "+cp);

                ArrayList at1=new ArrayList();
                ArrayList at2=new ArrayList();
                for(int i=0;i<dt.list2.size();i++)
                {
                    String sg1[]=dt.list2.get(i).toString().split("@");
                    String w1="";
                    String w2="";
                    for(int j=0;j<sg1.length;j++)
                    {
                        String sg2[]=sg1[j].split("#");
                        w1=w1+sg2[0]+"#";
                        w2=w2+sg2[1]+"#";
                    }
                    w1=w1.substring(0, w1.lastIndexOf("#"));
                    w2=w2.substring(0, w2.lastIndexOf("#"));
                    at1.add(w1); // item name
                    at2.add(w2); // count
                }

                ArrayList pp1=new ArrayList();
                ArrayList pp2=new ArrayList();
                for(int i=0;i<at1.size();i++)
                {
                    String t1=at1.get(i).toString();
                    if(t1.endsWith(g1))
                    {
                        pp1.add(t1);
                        pp2.add(at2.get(i).toString());
                    }

                }

                System.out.println("pp1 "+pp1);
                System.out.println("pp2 "+pp2);

                ArrayList path=new ArrayList();
                ArrayList pathValue=new ArrayList();

                ArrayList items1=new ArrayList();
                for(int i=0;i<pp1.size();i++)
                {
                    String d1[]=pp1.get(i).toString().split("#");
                    String d2[]=pp2.get(i).toString().split("#");
                    String pp="";
                    for(int j=d1.length-2;j>=0;j--)
                    {
                        pp=pp+d1[j]+"#";
                        if(!items1.contains(d1[j]))
                        items1.add(d1[j]);
                    }
                    pp=pp.substring(0, pp.lastIndexOf("#"));
                    path.add(pp);
                    pathValue.add(d2[d2.length-1]);
                }
                System.out.println("Path "+path);
                System.out.println("Path value "+pathValue);

                DefaultTableModel dm1=(DefaultTableModel)jTable3.getModel();
                for(int i=0;i<path.size();i++)
                {
                    String c1=path.get(i).toString();
                    c1=c1.replace("#", "");
                    String c2="<"+c1+"> : "+pathValue.get(i);
                    Vector v=new Vector();
                    v.add(c2);
                    dm1.addRow(v);
                }

                DefaultTableModel dm2=(DefaultTableModel)jTable4.getModel();

                ArrayList remove=new ArrayList();
                for(int i=0;i<items1.size();i++)
                {
                    String f1=items1.get(i).toString();
                    int c=0;
                    for(int j=0;j<path.size();j++)
                    {
                        String f2=path.get(j).toString();
                        if(f2.contains(f1))
                        {
                            c=c+Integer.parseInt(pathValue.get(j).toString());
                        }
                    }
                    Vector v=new Vector();
                    v.add(f1);
                    v.add(c);
                    dm2.addRow(v);
                    if(c<min_Util)
                    {
                        if(!remove.contains(f1))
                        remove.add(f1);
                    }

                }

                System.out.println("remove "+remove);

                DBConnection db=new DBConnection();
                Statement st=db.stt;

                DefaultTableModel dm3=(DefaultTableModel)jTable5.getModel();
                if(remove.isEmpty())
                {
                    int row1=dm1.getRowCount();
                    for(int i=0;i<row1;i++)
                    {
                        Vector v1=new Vector();
                        v1.add(dm1.getValueAt(i, 0));
                        dm3.addRow(v1);
                    }
                }
                else
                {
                    for(int i=0;i<remove.size();i++)
                    {
                        String f1=remove.get(i).toString();
                        for(int j=0;j<path.size();j++)
                        {
                            String f2=path.get(j).toString();
                            if(f2.contains(f1))
                            {
                                String pt1=f2.replace("#", "");
                                pt1=pt1.replace(f1, "");
                                ResultSet rs=st.executeQuery("select Profit from Profit_Info where Item='"+f1+"'");
                                int k1=Integer.parseInt(pathValue.get(j).toString());
                                if(rs.next())
                                {
                                    k1=k1-rs.getInt(1);
                                }
                                Vector v=new Vector();
                                v.add("<"+pt1+"> : "+k1);
                                dm3.addRow(v);
                            }
                            else
                            {
                                String pt1=f2.replace("#", "");
                                Vector v=new Vector();
                                v.add("<"+pt1+"> : "+pathValue.get(j));
                                dm3.addRow(v);
                            }
                        }
                    }
                }

                /*DefaultTableModel dm5=(DefaultTableModel)df.jTable5.getModel();

                for(int i=0;i<remove.size();i++)
                {
                    String f1=remove.get(i).toString();
                    for(int j=0;j<path.size();j++)
                    {
                        String f2=path.get(j).toString();
                        if(f2.contains(f1))
                        {
                            String pt1=f2.replace("#", "");
                            pt1=pt1.replace(f1, "");
                            ResultSet rs=st.executeQuery("select Profit from Profit_Info where Item='"+f1+"'");
                            int k1=Integer.parseInt(pathValue.get(j).toString());
                            if(rs.next())
                            {
                                k1=k1-rs.getInt(1);
                            }
                            Vector v=new Vector();
                            v.add("<"+pt1+"> : "+k1);
                            dm3.addRow(v);
                        }
                        else
                        {
                            String pt1=f2.replace("#", "");
                            Vector v=new Vector();
                            v.add("<"+pt1+"> : "+pathValue.get(j));
                            dm3.addRow(v);
                        }
                    }
                }*/

                ArrayList at3=new ArrayList();
                ArrayList at4=new ArrayList();
                for(int i=0;i<dt.list1.size();i++)
                {
                    String sg1[]=dt.list1.get(i).toString().split("@");
                    String w1="";
                    String w2="";
                    for(int j=0;j<sg1.length;j++)
                    {
                        String sg2[]=sg1[j].split("#");
                        w1=w1+sg2[0]+"#";
                        w2=w2+sg2[1]+"#";
                    }
                    w1=w1.substring(0, w1.lastIndexOf("#"));
                    w2=w2.substring(0, w2.lastIndexOf("#"));
                    at3.add(w1); // item name
                    at4.add(w2); // count
                }

                ArrayList pp3=new ArrayList();
                ArrayList pp4=new ArrayList();
                for(int i=0;i<at3.size();i++)
                {
                    String t1=at3.get(i).toString();
                    if(t1.endsWith(g1))
                    {
                        pp3.add(t1);
                        pp4.add(at4.get(i).toString());
                    }

                }

                System.out.println("pp3 "+pp3);
                System.out.println("pp4 "+pp4);

                ArrayList path1=new ArrayList();
                ArrayList path2=new ArrayList();

                ArrayList pathValue1=new ArrayList();

                ArrayList items2=new ArrayList();
                for(int i=0;i<pp3.size();i++)
                {
                    String d1[]=pp3.get(i).toString().split("#");
                    String d2[]=pp4.get(i).toString().split("#");
                    String pp="";
                    String ps="";
                    for(int j=d1.length-2;j>=0;j--)
                    {
                        pp=pp+d1[j]+"#";
                        ps=ps+d2[j]+"#";
                        if(!items2.contains(d1[j]))
                        items2.add(d1[j]);
                    }
                    pp=pp.substring(0, pp.lastIndexOf("#"));
                    path1.add(pp);
                    ps=ps.substring(0, ps.lastIndexOf("#"));
                    path2.add(ps);

                    pathValue1.add(d2[d2.length-1]);
                }
                System.out.println("Path1 "+path1);
                System.out.println("Path2 "+path2);
                System.out.println("Path value1 "+pathValue1);

                DefaultTableModel dm7=(DefaultTableModel)jTable7.getModel();
                for(int i=0;i<path.size();i++)
                {
                    String c1[]=path1.get(i).toString().split("#");
                    String c2[]=path2.get(i).toString().split("#");
                    String t1="";
                    String t2="";
                    for(int j=0;j<c1.length;j++)
                    {
                        ResultSet rs=st.executeQuery("select Profit from Profit_Info where Item='"+c1[j]+"'");
                        int cp1=0;
                        if(rs.next())
                        {
                            cp1=rs.getInt(1);
                        }
                        int v1=cp1*Integer.parseInt(c2[j]);
                        t1=t1+c1[j]+"("+v1+")";
                        t2=t2+v1+"#";
                    }
                    t2=t2.substring(0, t2.lastIndexOf("#"));
                    path2.set(i, t2);

                    t1="<"+t1+"> : "+pathValue.get(i);
                    Vector v=new Vector();
                    v.add(t1);
                    dm7.addRow(v);
                }

                DefaultTableModel dm6=(DefaultTableModel)jTable6.getModel();
                int row=dm7.getRowCount();

                ArrayList paths1[]=new ArrayList[path1.size()];
                ArrayList paths2[]=new ArrayList[path1.size()];
                for(int i=0;i<path1.size();i++)
                {
                    String h1[]=path1.get(i).toString().split("#");
                    String h2[]=path2.get(i).toString().split("#");
                    ArrayList lt1=new ArrayList();
                    ArrayList lt2=new ArrayList();
                    for(int j=0;j<h1.length;j++)
                    {
                        lt1.add(h1[j]);
                        lt2.add(h2[j]);
                    }
                    paths1[i]=lt1;
                    paths2[i]=lt2;
                }

                if(remove.isEmpty())
                {
                    int row1=dm7.getRowCount();
                    for(int i=0;i<row1;i++)
                    {
                        Vector v1=new Vector();
                        v1.add(dm7.getValueAt(i, 0));
                        dm6.addRow(v1);
                    }
                }
                else
                {
                    for(int i=0;i<remove.size();i++)
                    {
                        String f1=remove.get(i).toString();
                        for(int j=0;j<paths1.length;j++)
                        {
                            ArrayList lt1=paths1[j];
                            ArrayList lt2=paths2[j];
                            if(lt1.contains(f1))
                            {
                                int ind1=lt1.indexOf(f1);
                                lt1.remove(f1);
                                int kk1=Integer.parseInt(lt2.get(ind1).toString());
                                int kk2=Integer.parseInt(pathValue.get(j).toString())-kk1;
                                lt2.remove(ind1);

                                String kg1="";
                                for(int ii=0;ii<lt1.size();ii++)
                                {
                                    kg1=kg1+lt1.get(ii)+"("+lt2.get(ii)+")";
                                }
                                Vector v=new Vector();
                                v.add("<"+kg1+"> " +kk2);
                                dm6.addRow(v);
                            }
                            else
                            {
                                String kg1="";
                                for(int ii=0;ii<lt1.size();ii++)
                                {
                                    kg1=kg1+lt1.get(ii)+"("+lt2.get(ii)+")";
                                }
                                Vector v=new Vector();
                                v.add("<"+kg1+"> " +pathValue.get(j));
                                dm6.addRow(v);
                            }
                            System.out.println("lt1 ---> "+lt1);
                            System.out.println("lt2 ---> "+lt2);
                        }
                    }
                }

            }

        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
            long end=System.currentTimeMillis();
           dt.DLN= end-start;
           System.err.println("................."+dt.DLN);
                   
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       javafx.application.Application.launch(Graph.class); 
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
         
      
       
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DLUFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DLUFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DLUFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DLUFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
              //  new DLUFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    public javax.swing.JScrollPane jScrollPane6;
    public javax.swing.JTable jTable3;
    public javax.swing.JTable jTable4;
    public javax.swing.JTable jTable5;
    public javax.swing.JTable jTable6;
    public javax.swing.JTable jTable7;
    // End of variables declaration//GEN-END:variables
}
